/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file Simple2x2DetComputer.ih
 * @author Tristan Roussillon (\c tristan.roussillon@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2013/11/18
 *
 * Implementation of inline methods defined in Simple2x2DetComputer.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ---------------------------------------------------------------------------
template <typename TI, typename TO>
inline
DGtal::Simple2x2DetComputer<TI,TO>::Simple2x2DetComputer()
  : myA (NumberTraits<ResultInteger>::ZERO),  
    myB (NumberTraits<ResultInteger>::ZERO), 
    myAY (NumberTraits<ResultInteger>::ZERO),  
    myBX (NumberTraits<ResultInteger>::ZERO)  
{
}

// ---------------------------------------------------------------------------
template <typename TI, typename TO>
inline
DGtal::Simple2x2DetComputer<TI,TO>::Simple2x2DetComputer(const DGtal::Simple2x2DetComputer<TI,TO>& aOther)
  : myA (aOther.myA),  
    myB (aOther.myB), 
    myAY (aOther.myAY),  
    myBX (aOther.myBX)  
{
}

// ---------------------------------------------------------------------------
template <typename TI, typename TO>
inline
DGtal::Simple2x2DetComputer<TI,TO>& 
DGtal::Simple2x2DetComputer<TI,TO>::operator=(const DGtal::Simple2x2DetComputer<TI,TO>& aOther)
{
  if (this != &aOther)
    {
      myA = aOther.myA; 
      myB = aOther.myB; 
      myAY = aOther.myAY; 
      myBX = aOther.myBX; 
    }
  return *this; 
}

// ---------------------------------------------------------------------------
template <typename TI, typename TO>
inline
DGtal::Simple2x2DetComputer<TI,TO>::~Simple2x2DetComputer()
{
}

// ---------------------------------------------------------------------------
template <typename TI, typename TO>
inline
void 
DGtal::Simple2x2DetComputer<TI,TO>::init(const ArgumentInteger& aA, const ArgumentInteger& aB)
{
  myA = static_cast<ResultInteger>(aA); 
  myB = static_cast<ResultInteger>(aB);
}

// ---------------------------------------------------------------------------
template <typename TI, typename TO>
inline
typename DGtal::Simple2x2DetComputer<TI,TO>::ResultInteger
DGtal::Simple2x2DetComputer<TI,TO>::operator()(const ArgumentInteger& aX, const ArgumentInteger& aY) const
{
  myAY = myA * static_cast<ResultInteger>(aY);
  myBX = myB * static_cast<ResultInteger>(aX);  
  return myAY - myBX; 
}

// ---------------------------------------------------------------------------
template <typename TI, typename TO>
inline
typename DGtal::Simple2x2DetComputer<TI,TO>::ResultInteger
DGtal::Simple2x2DetComputer<TI,TO>::operator()(const ArgumentInteger& aA, const ArgumentInteger& aB, 
					       const ArgumentInteger& aX, const ArgumentInteger& aY)
{
  init(aA,aB); 
  return operator()(aX, aY); 
}

// ---------------------------------------------------------------------------
template <typename TI, typename TO>
inline
void
DGtal::Simple2x2DetComputer<TI,TO>::selfDisplay ( std::ostream & out ) const
{
  out << "[Simple2x2DetComputer]";
}

// ---------------------------------------------------------------------------
template <typename TI, typename TO>
inline
bool
DGtal::Simple2x2DetComputer<TI,TO>::isValid() const
{
  return true;
}



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename TI, typename TO>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
		    const Simple2x2DetComputer<TI,TO> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


