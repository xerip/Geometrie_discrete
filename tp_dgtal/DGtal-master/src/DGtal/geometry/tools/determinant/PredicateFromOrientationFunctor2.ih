/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file PredicateFromOrientationFunctor2.ih
 * @author Tristan Roussillon (\c tristan.roussillon@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2013/12/02
 *
 * Implementation of inline methods defined in PredicateFromOrientationFunctor2.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

// ------------------------------------------------------------------------
template <typename TOrientationFunctor, bool acceptNeg, bool acceptZero>
inline
DGtal::PredicateFromOrientationFunctor2<TOrientationFunctor,acceptNeg,acceptZero>
::PredicateFromOrientationFunctor2(Alias<Functor> aFunctor)
  : myFunctorPtr(&aFunctor), myThresholder()
{
}

// ------------------------------------------------------------------------
template <typename TOrientationFunctor, bool acceptNeg, bool acceptZero>
inline
void
DGtal::PredicateFromOrientationFunctor2<TOrientationFunctor,acceptNeg,acceptZero>
::init (const Point& aPoint1, const Point& aPoint2 )
{
  myFunctorPtr->init( aPoint1, aPoint2 ); 
}

// ------------------------------------------------------------------------
template <typename TOrientationFunctor, bool acceptNeg, bool acceptZero>
inline
bool
DGtal::PredicateFromOrientationFunctor2<TOrientationFunctor,acceptNeg,acceptZero>
::operator() (const Point& aPoint ) const
{
  return myThresholder( myFunctorPtr->operator()( aPoint ) ); 
}

// ------------------------------------------------------------------------
template <typename TOrientationFunctor, bool acceptNeg, bool acceptZero>
inline
bool
DGtal::PredicateFromOrientationFunctor2<TOrientationFunctor,acceptNeg,acceptZero>
::operator() (const Point& aPoint1, const Point& aPoint2, const Point& aPoint3 ) const
{
  myFunctorPtr->init( aPoint1, aPoint2 ); 
  return myThresholder( myFunctorPtr->operator()( aPoint3 ) ); 
}

// ------------------------------------------------------------------------
template <typename TOrientationFunctor, bool acceptNeg, bool acceptZero>
inline
void
DGtal::PredicateFromOrientationFunctor2<TOrientationFunctor,acceptNeg,acceptZero>
::selfDisplay ( std::ostream & out ) const
{
  out << "[PredicateFromOrientationFunctor2<"; 
  if (isValid()) 
    out << (*myFunctorPtr);  
  else
    out << "NULL"; 
  out << ">]";
}

// ------------------------------------------------------------------------
template <typename TOrientationFunctor, bool acceptNeg, bool acceptZero>
inline
bool
DGtal::PredicateFromOrientationFunctor2<TOrientationFunctor,acceptNeg,acceptZero>
::isValid() const
{
  return (myFunctorPtr != 0);
}



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename TOrientationFunctor, bool acceptNeg, bool acceptZero>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
		    const PredicateFromOrientationFunctor2<TOrientationFunctor, acceptNeg, acceptZero> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


