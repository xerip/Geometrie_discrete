/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file ChordGenericStandardPlaneComputer.ih
 * @author Jacques-Olivier Lachaud (\c jacques-olivier.lachaud@univ-savoie.fr )
 * Laboratory of Mathematics (CNRS, UMR 5127), University of Savoie, France
 *
 * @date 2012/09/20
 *
 * Implementation of inline methods defined in ChordGenericStandardPlaneComputer.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// DEFINITION of static members
///////////////////////////////////////////////////////////////////////////////
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
typename DGtal::ChordGenericStandardPlaneComputer<TSpace, TInputPoint, TInternalScalar>::Transform
DGtal::ChordGenericStandardPlaneComputer<TSpace, TInputPoint, TInternalScalar>::myTransforms[4] = {
  Transform( true, true ), Transform( true, false ), Transform( false, true ), Transform( false, false ) };

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
DGtal::ChordGenericStandardPlaneComputer<TSpace, TInputPoint, TInternalScalar>::
~ChordGenericStandardPlaneComputer()
{ // Nothing to do.
}
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
DGtal::ChordGenericStandardPlaneComputer<TSpace, TInputPoint, TInternalScalar>::
ChordGenericStandardPlaneComputer()
{ // Object is invalid
  _orthantsToErase.reserve( 4 );
}
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
DGtal::ChordGenericStandardPlaneComputer<TSpace, TInputPoint, TInternalScalar>::
ChordGenericStandardPlaneComputer( const ChordGenericStandardPlaneComputer & other )
  : myOrthants( other.myOrthants )
{
  for ( OrthantConstIterator it = myOrthants.begin(), itE = myOrthants.end();
        it != itE; ++it )
    myComputers[ *it ] = other.myComputers[ *it ];
  _orthantsToErase.reserve( 4 );
}
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
DGtal::ChordGenericStandardPlaneComputer<TSpace, TInputPoint, TInternalScalar> &
DGtal::ChordGenericStandardPlaneComputer<TSpace, TInputPoint, TInternalScalar>::
operator=( const ChordGenericStandardPlaneComputer & other )
{
  if ( this != &other )
    {
      myOrthants = other.myOrthants;
      for ( OrthantConstIterator it = myOrthants.begin(), itE = myOrthants.end();
            it != itE; ++it )
        myComputers[ *it ] = other.myComputers[ *it ];
    }
  return *this;
}
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
DGtal::Dimension
DGtal::ChordGenericStandardPlaneComputer<TSpace, TInputPoint, TInternalScalar>::
active() const
{
  ASSERT( myOrthants.size() > 0 );
  return myOrthants[ 0 ];
}
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
void
DGtal::ChordGenericStandardPlaneComputer<TSpace, TInputPoint, TInternalScalar>::
clear()
{
  myOrthants.clear();
  for ( unsigned int i = 0; i < 4; ++i )
    {
      myOrthants.push_back( i );
      myComputers[ i ].clear();
    }
}
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
void
DGtal::ChordGenericStandardPlaneComputer<TSpace, TInputPoint, TInternalScalar>::
init( InternalScalar widthNumerator,
      InternalScalar widthDenominator )
{
  clear();
  for ( unsigned int i = 0; i < 4; ++i )
    {
      // all Chord computers computes naive planes along z, but the 4
      // transforms dilate the x,y coordinates in four different ways
      // to get all the possible orientations of standard planes.
      myComputers[ i ].init( 2, widthNumerator, widthDenominator );
    }
}
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
typename DGtal::ChordGenericStandardPlaneComputer<TSpace, TInputPoint, TInternalScalar>::Size
DGtal::ChordGenericStandardPlaneComputer<TSpace, TInputPoint, TInternalScalar>::
size() const
{
  return myComputers[ active() ].size();
}
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
bool
DGtal::ChordGenericStandardPlaneComputer<TSpace, TInputPoint, TInternalScalar>::
empty() const
{
  return myComputers[ active() ].empty();
}
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
typename DGtal::ChordGenericStandardPlaneComputer<TSpace, TInputPoint, TInternalScalar>::ConstIterator
DGtal::ChordGenericStandardPlaneComputer<TSpace, TInputPoint, TInternalScalar>::
begin() const
{
  return ConstIterator( myComputers[ active() ].begin(), invT( active() ) );
}
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
typename DGtal::ChordGenericStandardPlaneComputer<TSpace, TInputPoint, TInternalScalar>::ConstIterator
DGtal::ChordGenericStandardPlaneComputer<TSpace, TInputPoint, TInternalScalar>::
end() const
{
  return ConstIterator( myComputers[ active() ].end(), invT( active() ) );
}

//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
typename DGtal::ChordGenericStandardPlaneComputer<TSpace, TInputPoint, TInternalScalar>::Size
DGtal::ChordGenericStandardPlaneComputer<TSpace, TInputPoint, TInternalScalar>::
max_size() const
{
  return myComputers[ active() ].max_size();
}
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
typename DGtal::ChordGenericStandardPlaneComputer<TSpace, TInputPoint, TInternalScalar>::Size
DGtal::ChordGenericStandardPlaneComputer<TSpace, TInputPoint, TInternalScalar>::
maxSize() const
{
  return max_size();
}
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
bool
DGtal::ChordGenericStandardPlaneComputer<TSpace, TInputPoint, TInternalScalar>::
operator()( const Point & p ) const
{
  return myComputers[ active() ].operator()( t( active() )( p ) );
}

//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
bool
DGtal::ChordGenericStandardPlaneComputer<TSpace, TInputPoint, TInternalScalar>::
extendAsIs( const InputPoint & p )
{ 
  ASSERT( isValid() );
  unsigned int nbok = 0;
  for ( OrthantConstIterator it = myOrthants.begin(), itE = myOrthants.end(); 
        it != itE; ++it )
    {
      nbok += myComputers[ *it ].operator()( t( *it )( p ) ) ? 1 : 0;
    }
  if ( nbok != 0 ) // at least one is ok.
    {
      for ( OrthantIterator it = myOrthants.begin(); it != myOrthants.end(); )
        // cannot put end() in variable, since end() moves when
        // modifiying a vector.
        {
          bool ok = myComputers[ *it ].extendAsIs( t( *it )( p ) );
          if ( ! ok ) 
            it = myOrthants.erase( it );
          else
            ++it;
        }
      ASSERT( ! myOrthants.empty() );
      return true;
    }
  return false;
}

//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
bool
DGtal::ChordGenericStandardPlaneComputer<TSpace, TInputPoint, TInternalScalar>::
extend( const InputPoint & p )
{
  ASSERT( isValid() );
  unsigned int nbok = 0;
  _orthantsToErase.clear();
  for ( OrthantConstIterator orthIt = myOrthants.begin(), orthItE = myOrthants.end(); 
        orthIt != orthItE; ++orthIt )
    {
      Point Tp = t( *orthIt )( p );
      bool ok = myComputers[ *orthIt ].extend( Tp );
      if ( ! ok ) _orthantsToErase.push_back( *orthIt );
      else ++nbok;
    }
  if ( nbok != 0 ) // at least one is ok.
    { // if one is ok, we must remove ko ones from the list of active
      // axes.
      OrthantIterator orthIt = myOrthants.begin();
      for ( unsigned int i = 0; i < _orthantsToErase.size(); ++i )
        {
          while ( *orthIt != _orthantsToErase[ i ] ) ++orthIt;
          orthIt = myOrthants.erase( orthIt );
        }
      return true;
    }
  return false;
}
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
bool
DGtal::ChordGenericStandardPlaneComputer<TSpace, TInputPoint, TInternalScalar>::
isExtendable( const InputPoint & p ) const
{
  ASSERT( isValid() );
  unsigned int nbok = 0;
  for ( OrthantConstIterator it = myOrthants.begin(), itE = myOrthants.end(); 
        it != itE; ++it )
    {
      nbok += myComputers[ *it ].isExtendable( t( *it )( p ) ) ? 1 : 0;
    }
  return nbok != 0;
}
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
template <typename TInputIterator>
bool
DGtal::ChordGenericStandardPlaneComputer<TSpace, TInputPoint, TInternalScalar>::
extend( TInputIterator it, TInputIterator itE )
{
  BOOST_CONCEPT_ASSERT(( boost::InputIterator<TInputIterator> ));
  ASSERT( isValid() );
  typedef boost::transform_iterator<Transform,TInputIterator,InputPoint,InputPoint>
    TransformedInputIterator;
  unsigned int nbok = 0;
  _orthantsToErase.clear();
  for ( OrthantConstIterator orthIt = myOrthants.begin(), orthItE = myOrthants.end(); 
        orthIt != orthItE; ++orthIt )
    {
      Dimension orthant = *orthIt;
      TransformedInputIterator transIt ( it,  t( orthant ) ); 
      TransformedInputIterator transItE( itE, t( orthant ) ); 
      bool ok = myComputers[ orthant ].extend( transIt, transItE );
      if ( ! ok ) _orthantsToErase.push_back( *orthIt );
      else ++nbok;
    }
  if ( nbok != 0 ) // at least one is ok.
    { // if one is ok, we must remove ko ones from the list of active
      // axes.
      OrthantIterator orthIt = myOrthants.begin();
      for ( unsigned int i = 0; i < _orthantsToErase.size(); ++i )
        {
          while ( *orthIt != _orthantsToErase[ i ] ) ++orthIt;
          orthIt = myOrthants.erase( orthIt );
        }
      return true;
    }
  return false;
}
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
template <typename TInputIterator>
bool
DGtal::ChordGenericStandardPlaneComputer<TSpace, TInputPoint, TInternalScalar>::
isExtendable( TInputIterator it, TInputIterator itE ) const
{
  BOOST_CONCEPT_ASSERT(( boost::InputIterator<TInputIterator> ));
  ASSERT( isValid() );
  typedef boost::transform_iterator<Transform,TInputIterator,InputPoint,InputPoint>
    TransformedInputIterator;
  unsigned int nbok = 0;
  for ( OrthantConstIterator orthIt = myOrthants.begin(), orthItE = myOrthants.end(); 
        orthIt != orthItE; ++orthIt )
    {
      Dimension orthant = *orthIt;
      TransformedInputIterator transIt ( it,  t( orthant ) ); 
      TransformedInputIterator transItE( itE, t( orthant ) ); 
      nbok += myComputers[ orthant ].isExtendable( transIt, transItE ) ? 1 : 0;
    }
  return nbok != 0;
}

//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
typename DGtal::ChordGenericStandardPlaneComputer<TSpace, TInputPoint, TInternalScalar>::Primitive
DGtal::ChordGenericStandardPlaneComputer<TSpace, TInputPoint, TInternalScalar>::
primitive() const
{
  InternalVector n;
  InternalScalar imin, imax;
  InputPoint p_min, p_max;
  getCharacteristics( n, imin, imax, p_min, p_max );
  double ddenom = NumberTraits<InternalScalar>::castToDouble( n[ 2 ] );
  double min = ( NumberTraits<InternalScalar>::castToDouble( imin ) - 0.5 ) / ddenom;
  double max = ( NumberTraits<InternalScalar>::castToDouble( imax ) + 0.5 ) / ddenom;
  typename Space::RealVector normal;
  normal[ 0 ] = NumberTraits<InternalScalar>::castToDouble( n[ 0 ] ) / ddenom;
  normal[ 1 ] = NumberTraits<InternalScalar>::castToDouble( n[ 1 ] ) / ddenom;
  normal[ 2 ] = NumberTraits<InternalScalar>::castToDouble( n[ 2 ] ) / ddenom;
  return Primitive( min, normal, max-min );
}

//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
template <typename Vector3D>
inline
void
DGtal::ChordGenericStandardPlaneComputer<TSpace, TInputPoint, TInternalScalar>::
getNormal( Vector3D & normal ) const
{
  myComputers[ active() ].getNormal( normal );
  invT( active() ).transform( normal );
}
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
template <typename Vector3D>
inline
void
DGtal::ChordGenericStandardPlaneComputer<TSpace, TInputPoint, TInternalScalar>::
getUnitNormal( Vector3D & normal ) const
{
  myComputers[ active() ].getNormal( normal );
  invT( active() ).transform( normal );
  normal /= sqrt( normal[0]*normal[0]
                  +normal[1]*normal[1]
                  +normal[2]*normal[2] );
}
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
void
DGtal::ChordGenericStandardPlaneComputer<TSpace, TInputPoint, TInternalScalar>::
getBounds( double & min, double & max ) const
{
  InternalVector n;
  InternalScalar imin, imax;
  InputPoint p_min, p_max;
  getCharacteristics( n, imin, imax, p_min, p_max );
  double ddenom = NumberTraits<InternalScalar>::castToDouble( n[ 2 ] );
  min = ( NumberTraits<InternalScalar>::castToDouble( imin ) - 0.5 ) / ddenom;
  max = ( NumberTraits<InternalScalar>::castToDouble( imax ) + 0.5 ) / ddenom;
}
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
typename DGtal::ChordGenericStandardPlaneComputer<TSpace, TInputPoint, TInternalScalar>::InputPoint
DGtal::ChordGenericStandardPlaneComputer<TSpace, TInputPoint, TInternalScalar>::
minimalPoint() const
{
  InternalVector n;
  InternalScalar imin, imax;
  InputPoint p_min, p_max;
  getCharacteristics( n, imin, imax, p_min, p_max );
  return p_min;
}
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
typename DGtal::ChordGenericStandardPlaneComputer<TSpace, TInputPoint, TInternalScalar>::InputPoint
DGtal::ChordGenericStandardPlaneComputer<TSpace, TInputPoint, TInternalScalar>::
maximalPoint() const
{
  InternalVector n;
  InternalScalar imin, imax;
  InputPoint p_min, p_max;
  getCharacteristics( n, imin, imax, p_min, p_max );
  return p_max;
}

//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
void
DGtal::ChordGenericStandardPlaneComputer<TSpace, TInputPoint, TInternalScalar>::
getCharacteristics( InternalVector & n, 
                    InternalScalar & imin, InternalScalar & imax, 
                    InputPoint & p_min, InputPoint & p_max ) const
{
  // This rather complex method is necessary to guarantee that there
  // are no numeric error due to bad rounding when casting to double.
  p_min = invT( active() )( myComputers[ active() ].minimalPoint() );
  p_max = invT( active() )( myComputers[ active() ].maximalPoint() );
  // min and max may be swapped because of the transform.
  n = myComputers[ active() ].exactNormal();
  invT( active() ).transform( n );
  if ( n[ 2 ] < NumberTraits<InternalScalar>::ZERO )
    { n = -n; }
  imin =
    ( ( n[ 0 ] * InternalScalar( p_min[ 0 ] ) )
      + ( n[ 1 ] * InternalScalar( p_min[ 1 ] ) )
      + ( n[ 2 ] * InternalScalar( p_min[ 2 ] ) ) );
  imax = 
    ( ( n[ 0 ] * InternalScalar( p_max[ 0 ] ) ) 
      + ( n[ 1 ] * InternalScalar( p_max[ 1 ] ) ) 
      + ( n[ 2 ] * InternalScalar( p_max[ 2 ] ) ) );
  if ( imax < imin ) 
    {
      std::swap( imin, imax );
      std::swap( p_min, p_max );
    }
}


///////////////////////////////////////////////////////////////////////////////
// Interface - public :

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
void
DGtal::ChordGenericStandardPlaneComputer<TSpace, TInputPoint, TInternalScalar>::selfDisplay ( std::ostream & out ) const
{
  out << "[ChordGenericStandardPlaneComputer";
  for ( OrthantConstIterator orthIt = myOrthants.begin(), orthItE = myOrthants.end(); 
        orthIt != orthItE; ++orthIt )
    out << " " << myComputers[ *orthIt ];
  out << " ]"; 
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
bool
DGtal::ChordGenericStandardPlaneComputer<TSpace, TInputPoint, TInternalScalar>::isValid() const
{
  return myComputers[ active() ].isValid();
}


///////////////////////////////////////////////////////////////////////////////
// Internals
///////////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
typename DGtal::ChordGenericStandardPlaneComputer<TSpace, TInputPoint, TInternalScalar>::Transform
DGtal::ChordGenericStandardPlaneComputer<TSpace, TInputPoint, TInternalScalar>::
t( Dimension orthant )
{
  ASSERT( orthant < 4 );
  return myTransforms[ orthant ];
}
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
typename DGtal::ChordGenericStandardPlaneComputer<TSpace, TInputPoint, TInternalScalar>::Transform
DGtal::ChordGenericStandardPlaneComputer<TSpace, TInputPoint, TInternalScalar>::
invT( Dimension orthant )
{
  ASSERT( orthant < 4 );
  return myTransforms[ orthant ^ 0x3 ];
}

///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
		  const ChordGenericStandardPlaneComputer<TSpace, TInputPoint, TInternalScalar> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////

